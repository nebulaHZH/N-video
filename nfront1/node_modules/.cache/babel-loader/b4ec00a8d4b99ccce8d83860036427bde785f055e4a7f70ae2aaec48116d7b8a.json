{"ast":null,"code":"import '../../../utils/index.mjs';\nimport { buildProps } from '../../../utils/vue/props/runtime.mjs';\nimport { iconPropType } from '../../../utils/vue/icon.mjs';\nconst dialogContentProps = buildProps({\n  center: Boolean,\n  alignCenter: Boolean,\n  closeIcon: {\n    type: iconPropType\n  },\n  draggable: Boolean,\n  overflow: Boolean,\n  fullscreen: Boolean,\n  showClose: {\n    type: Boolean,\n    default: true\n  },\n  title: {\n    type: String,\n    default: \"\"\n  },\n  ariaLevel: {\n    type: String,\n    default: \"2\"\n  }\n});\nconst dialogContentEmits = {\n  close: () => true\n};\nexport { dialogContentEmits, dialogContentProps };","map":{"version":3,"names":["dialogContentProps","buildProps","center","Boolean","alignCenter","closeIcon","type","iconPropType","draggable","overflow","fullscreen","showClose","default","title","String","ariaLevel","dialogContentEmits","close"],"sources":["../../../../../../packages/components/dialog/src/dialog-content.ts"],"sourcesContent":["import { buildProps, iconPropType } from '@element-plus/utils'\n\nexport const dialogContentProps = buildProps({\n  /**\n   * @description whether to align the header and footer in center\n   */\n  center: Boolean,\n  /**\n   * @description whether to align the dialog both horizontally and vertically\n   */\n  alignCenter: Boolean,\n  /**\n   * @description custom close icon, default is Close\n   */\n  closeIcon: {\n    type: iconPropType,\n  },\n  /**\n   * @description enable dragging feature for Dialog\n   */\n  draggable: Boolean,\n  /**\n   * @description draggable Dialog can overflow the viewport\n   */\n  overflow: Boolean,\n  /**\n   * @description whether the Dialog takes up full screen\n   */\n  fullscreen: Boolean,\n  /**\n   * @description whether to show a close button\n   */\n  showClose: {\n    type: Boolean,\n    default: true,\n  },\n  /**\n   * @description title of Dialog. Can also be passed with a named slot (see the following table)\n   */\n  title: {\n    type: String,\n    default: '',\n  },\n  /**\n   * @description header's aria-level attribute\n   */\n  ariaLevel: {\n    type: String,\n    default: '2',\n  },\n} as const)\n\nexport const dialogContentEmits = {\n  close: () => true,\n}\n"],"mappings":";;;AACY,MAACA,kBAAkB,GAAGC,UAAU,CAAC;EAC3CC,MAAM,EAAEC,OAAO;EACfC,WAAW,EAAED,OAAO;EACpBE,SAAS,EAAE;IACTC,IAAI,EAAEC;EACV,CAAG;EACDC,SAAS,EAAEL,OAAO;EAClBM,QAAQ,EAAEN,OAAO;EACjBO,UAAU,EAAEP,OAAO;EACnBQ,SAAS,EAAE;IACTL,IAAI,EAAEH,OAAO;IACbS,OAAO,EAAE;EACb,CAAG;EACDC,KAAK,EAAE;IACLP,IAAI,EAAEQ,MAAM;IACZF,OAAO,EAAE;EACb,CAAG;EACDG,SAAS,EAAE;IACTT,IAAI,EAAEQ,MAAM;IACZF,OAAO,EAAE;EACb;AACA,CAAC;AACW,MAACI,kBAAkB,GAAG;EAChCC,KAAK,EAAEA,CAAA,KAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}