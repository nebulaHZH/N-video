{"ast":null,"code":"import { defineComponent, ref, reactive, computed, watch, openBlock, createElementBlock, unref, normalizeClass, createElementVNode, normalizeStyle, Fragment, renderList, renderSlot, createTextVNode, toDisplayString } from 'vue';\nimport { useActiveElement, useResizeObserver } from '@vueuse/core';\nimport '../../../hooks/index.mjs';\nimport '../../form/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { segmentedProps, segmentedEmits } from './segmented.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { useFormSize, useFormDisabled } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { useFormItem, useFormItemInputId } from '../../form/src/hooks/use-form-item.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { isObject } from '@vue/shared';\nimport { debugWarn } from '../../../utils/error.mjs';\nconst _hoisted_1 = [\"id\", \"aria-label\", \"aria-labelledby\"];\nconst _hoisted_2 = [\"name\", \"disabled\", \"checked\", \"onChange\"];\nconst __default__ = defineComponent({\n  name: \"ElSegmented\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: segmentedProps,\n  emits: segmentedEmits,\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"segmented\");\n    const segmentedId = useId();\n    const segmentedSize = useFormSize();\n    const _disabled = useFormDisabled();\n    const {\n      formItem\n    } = useFormItem();\n    const {\n      inputId,\n      isLabeledByFormItem\n    } = useFormItemInputId(props, {\n      formItemContext: formItem\n    });\n    const segmentedRef = ref(null);\n    const activeElement = useActiveElement();\n    const state = reactive({\n      isInit: false,\n      width: 0,\n      translateX: 0,\n      disabled: false,\n      focusVisible: false\n    });\n    const handleChange = item => {\n      const value = getValue(item);\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(CHANGE_EVENT, value);\n    };\n    const getValue = item => {\n      return isObject(item) ? item.value : item;\n    };\n    const getLabel = item => {\n      return isObject(item) ? item.label : item;\n    };\n    const getDisabled = item => {\n      return !!(_disabled.value || (isObject(item) ? item.disabled : false));\n    };\n    const getSelected = item => {\n      return props.modelValue === getValue(item);\n    };\n    const getOption = value => {\n      return props.options.find(item => getValue(item) === value);\n    };\n    const getItemCls = item => {\n      return [ns.e(\"item\"), ns.is(\"selected\", getSelected(item)), ns.is(\"disabled\", getDisabled(item))];\n    };\n    const updateSelect = () => {\n      if (!segmentedRef.value) return;\n      const selectedItem = segmentedRef.value.querySelector(\".is-selected\");\n      const selectedItemInput = segmentedRef.value.querySelector(\".is-selected input\");\n      if (!selectedItem || !selectedItemInput) {\n        state.width = 0;\n        state.translateX = 0;\n        state.disabled = false;\n        state.focusVisible = false;\n        return;\n      }\n      const rect = selectedItem.getBoundingClientRect();\n      state.isInit = true;\n      state.width = rect.width;\n      state.translateX = selectedItem.offsetLeft;\n      state.disabled = getDisabled(getOption(props.modelValue));\n      try {\n        state.focusVisible = selectedItemInput.matches(\":focus-visible\");\n      } catch (e) {}\n    };\n    const segmentedCls = computed(() => [ns.b(), ns.m(segmentedSize.value), ns.is(\"block\", props.block)]);\n    const selectedStyle = computed(() => ({\n      width: `${state.width}px`,\n      transform: `translateX(${state.translateX}px)`,\n      display: state.isInit ? \"block\" : \"none\"\n    }));\n    const selectedCls = computed(() => [ns.e(\"item-selected\"), ns.is(\"disabled\", state.disabled), ns.is(\"focus-visible\", state.focusVisible)]);\n    const name = computed(() => {\n      return props.name || segmentedId.value;\n    });\n    useResizeObserver(segmentedRef, updateSelect);\n    watch(activeElement, updateSelect);\n    watch(() => props.modelValue, () => {\n      var _a;\n      updateSelect();\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\").catch(err => debugWarn(err));\n      }\n    }, {\n      flush: \"post\"\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        id: unref(inputId),\n        ref_key: \"segmentedRef\",\n        ref: segmentedRef,\n        class: normalizeClass(unref(segmentedCls)),\n        role: \"radiogroup\",\n        \"aria-label\": !unref(isLabeledByFormItem) ? _ctx.ariaLabel || \"segmented\" : void 0,\n        \"aria-labelledby\": unref(isLabeledByFormItem) ? unref(formItem).labelId : void 0\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"group\"))\n      }, [createElementVNode(\"div\", {\n        style: normalizeStyle(unref(selectedStyle)),\n        class: normalizeClass(unref(selectedCls))\n      }, null, 6), (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.options, (item, index) => {\n        return openBlock(), createElementBlock(\"label\", {\n          key: index,\n          class: normalizeClass(getItemCls(item))\n        }, [createElementVNode(\"input\", {\n          class: normalizeClass(unref(ns).e(\"item-input\")),\n          type: \"radio\",\n          name: unref(name),\n          disabled: getDisabled(item),\n          checked: getSelected(item),\n          onChange: $event => handleChange(item)\n        }, null, 42, _hoisted_2), createElementVNode(\"div\", {\n          class: normalizeClass(unref(ns).e(\"item-label\"))\n        }, [renderSlot(_ctx.$slots, \"default\", {\n          item\n        }, () => [createTextVNode(toDisplayString(getLabel(item)), 1)])], 2)], 2);\n      }), 128))], 2)], 10, _hoisted_1);\n    };\n  }\n});\nvar Segmented = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"segmented.vue\"]]);\nexport { Segmented as default };","map":{"version":3,"names":["name","ns","useNamespace","segmentedId","useId","segmentedSize","useFormSize","_disabled","useFormDisabled","formItem","useFormItem","inputId","isLabeledByFormItem","useFormItemInputId","props","formItemContext","segmentedRef","ref","activeElement","useActiveElement","state","reactive","isInit","width","translateX","disabled","focusVisible","handleChange","item","value","getValue","emit","UPDATE_MODEL_EVENT","CHANGE_EVENT","isObject","getLabel","label","getDisabled","getSelected","modelValue","getOption","options","find","getItemCls","e","is","updateSelect","selectedItem","querySelector","selectedItemInput","rect","getBoundingClientRect","offsetLeft","matches","segmentedCls","computed","b","m","block","selectedStyle","transform","display","selectedCls","useResizeObserver","watch","_a","validateEvent","validate","call","catch","err","debugWarn","flush"],"sources":["../../../../../../packages/components/segmented/src/segmented.vue"],"sourcesContent":["<template>\n  <div\n    :id=\"inputId\"\n    ref=\"segmentedRef\"\n    :class=\"segmentedCls\"\n    role=\"radiogroup\"\n    :aria-label=\"!isLabeledByFormItem ? ariaLabel || 'segmented' : undefined\"\n    :aria-labelledby=\"isLabeledByFormItem ? formItem!.labelId : undefined\"\n  >\n    <div :class=\"ns.e('group')\">\n      <div :style=\"selectedStyle\" :class=\"selectedCls\" />\n      <label\n        v-for=\"(item, index) in options\"\n        :key=\"index\"\n        :class=\"getItemCls(item)\"\n      >\n        <input\n          :class=\"ns.e('item-input')\"\n          type=\"radio\"\n          :name=\"name\"\n          :disabled=\"getDisabled(item)\"\n          :checked=\"getSelected(item)\"\n          @change=\"handleChange(item)\"\n        />\n        <div :class=\"ns.e('item-label')\">\n          <slot :item=\"item\">{{ getLabel(item) }}</slot>\n        </div>\n      </label>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, reactive, ref, watch } from 'vue'\nimport { useActiveElement, useResizeObserver } from '@vueuse/core'\nimport { useId, useNamespace } from '@element-plus/hooks'\nimport {\n  useFormDisabled,\n  useFormItem,\n  useFormItemInputId,\n  useFormSize,\n} from '@element-plus/components/form'\nimport { debugWarn, isObject } from '@element-plus/utils'\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { segmentedEmits, segmentedProps } from './segmented'\nimport type { Option } from './types'\n\ndefineOptions({\n  name: 'ElSegmented',\n})\n\nconst props = defineProps(segmentedProps)\nconst emit = defineEmits(segmentedEmits)\n\nconst ns = useNamespace('segmented')\nconst segmentedId = useId()\nconst segmentedSize = useFormSize()\nconst _disabled = useFormDisabled()\nconst { formItem } = useFormItem()\nconst { inputId, isLabeledByFormItem } = useFormItemInputId(props, {\n  formItemContext: formItem,\n})\n\nconst segmentedRef = ref<HTMLElement | null>(null)\nconst activeElement = useActiveElement()\n\nconst state = reactive({\n  isInit: false,\n  width: 0,\n  translateX: 0,\n  disabled: false,\n  focusVisible: false,\n})\n\nconst handleChange = (item: Option) => {\n  const value = getValue(item)\n  emit(UPDATE_MODEL_EVENT, value)\n  emit(CHANGE_EVENT, value)\n}\n\nconst getValue = (item: Option) => {\n  return isObject(item) ? item.value : item\n}\n\nconst getLabel = (item: Option) => {\n  return isObject(item) ? item.label : item\n}\n\nconst getDisabled = (item: Option) => {\n  return !!(_disabled.value || (isObject(item) ? item.disabled : false))\n}\n\nconst getSelected = (item: Option) => {\n  return props.modelValue === getValue(item)\n}\n\nconst getOption = (value: any) => {\n  return props.options.find((item) => getValue(item) === value)\n}\n\nconst getItemCls = (item: Option) => {\n  return [\n    ns.e('item'),\n    ns.is('selected', getSelected(item)),\n    ns.is('disabled', getDisabled(item)),\n  ]\n}\n\nconst updateSelect = () => {\n  if (!segmentedRef.value) return\n  const selectedItem = segmentedRef.value.querySelector(\n    '.is-selected'\n  ) as HTMLElement\n  const selectedItemInput = segmentedRef.value.querySelector(\n    '.is-selected input'\n  ) as HTMLElement\n  if (!selectedItem || !selectedItemInput) {\n    state.width = 0\n    state.translateX = 0\n    state.disabled = false\n    state.focusVisible = false\n    return\n  }\n  const rect = selectedItem.getBoundingClientRect()\n  state.isInit = true\n  state.width = rect.width\n  state.translateX = selectedItem.offsetLeft\n  state.disabled = getDisabled(getOption(props.modelValue))\n  try {\n    // This will failed in test\n    state.focusVisible = selectedItemInput.matches(':focus-visible')\n  } catch {}\n}\n\nconst segmentedCls = computed(() => [\n  ns.b(),\n  ns.m(segmentedSize.value),\n  ns.is('block', props.block),\n])\n\nconst selectedStyle = computed(() => ({\n  width: `${state.width}px`,\n  transform: `translateX(${state.translateX}px)`,\n  display: state.isInit ? 'block' : 'none',\n}))\n\nconst selectedCls = computed(() => [\n  ns.e('item-selected'),\n  ns.is('disabled', state.disabled),\n  ns.is('focus-visible', state.focusVisible),\n])\n\nconst name = computed(() => {\n  return props.name || segmentedId.value\n})\n\nuseResizeObserver(segmentedRef, updateSelect)\n\nwatch(activeElement, updateSelect)\n\nwatch(\n  () => props.modelValue,\n  () => {\n    updateSelect()\n    if (props.validateEvent) {\n      formItem?.validate?.('change').catch((err) => debugWarn(err))\n    }\n  },\n  {\n    flush: 'post',\n  }\n)\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}