{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, inject, ref, computed, watch, provide, getCurrentInstance, resolveComponent, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, renderSlot, createElementVNode, toDisplayString, createCommentVNode, withDirectives, vShow } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../form/index.mjs';\nimport { selectKey } from '../../select/src/token.mjs';\nimport TreeStore from './model/tree-store.mjs';\nimport { getNodeKey, handleCurrentChange } from './model/util.mjs';\nimport ElTreeNode from './tree-node.mjs';\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast.mjs';\nimport { useDragNodeHandler } from './model/useDragNode.mjs';\nimport { useKeydown } from './model/useKeydown.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { iconPropType } from '../../../utils/vue/icon.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { formItemContextKey } from '../../form/src/constants.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElTree\",\n  components: {\n    ElTreeNode\n  },\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    emptyText: {\n      type: String\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true\n    },\n    defaultCheckedKeys: Array,\n    defaultExpandedKeys: Array,\n    currentNodeKey: [String, Number],\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    },\n    draggable: {\n      type: Boolean,\n      default: false\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object,\n      default: () => ({\n        children: \"children\",\n        label: \"label\",\n        disabled: \"disabled\"\n      })\n    },\n    lazy: {\n      type: Boolean,\n      default: false\n    },\n    highlightCurrent: Boolean,\n    load: Function,\n    filterNodeMethod: Function,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18\n    },\n    icon: {\n      type: iconPropType\n    }\n  },\n  emits: [\"check-change\", \"current-change\", \"node-click\", \"node-contextmenu\", \"node-collapse\", \"node-expand\", \"check\", \"node-drag-start\", \"node-drag-end\", \"node-drop\", \"node-drag-leave\", \"node-drag-enter\", \"node-drag-over\"],\n  setup(props, ctx) {\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"tree\");\n    const selectInfo = inject(selectKey, null);\n    const store = ref(new TreeStore({\n      key: props.nodeKey,\n      data: props.data,\n      lazy: props.lazy,\n      props: props.props,\n      load: props.load,\n      currentNodeKey: props.currentNodeKey,\n      checkStrictly: props.checkStrictly,\n      checkDescendants: props.checkDescendants,\n      defaultCheckedKeys: props.defaultCheckedKeys,\n      defaultExpandedKeys: props.defaultExpandedKeys,\n      autoExpandParent: props.autoExpandParent,\n      defaultExpandAll: props.defaultExpandAll,\n      filterNodeMethod: props.filterNodeMethod\n    }));\n    store.value.initialize();\n    const root = ref(store.value.root);\n    const currentNode = ref(null);\n    const el$ = ref(null);\n    const dropIndicator$ = ref(null);\n    const {\n      broadcastExpanded\n    } = useNodeExpandEventBroadcast(props);\n    const {\n      dragState\n    } = useDragNodeHandler({\n      props,\n      ctx,\n      el$,\n      dropIndicator$,\n      store\n    });\n    useKeydown({\n      el$\n    }, store);\n    const isEmpty = computed(() => {\n      const {\n        childNodes\n      } = root.value;\n      const hasFilteredOptions = selectInfo ? selectInfo.hasFilteredOptions !== 0 : false;\n      return (!childNodes || childNodes.length === 0 || childNodes.every(({\n        visible\n      }) => !visible)) && !hasFilteredOptions;\n    });\n    watch(() => props.currentNodeKey, newVal => {\n      store.value.setCurrentNodeKey(newVal);\n    });\n    watch(() => props.defaultCheckedKeys, newVal => {\n      store.value.setDefaultCheckedKey(newVal);\n    });\n    watch(() => props.defaultExpandedKeys, newVal => {\n      store.value.setDefaultExpandedKeys(newVal);\n    });\n    watch(() => props.data, newVal => {\n      store.value.setData(newVal);\n    }, {\n      deep: true\n    });\n    watch(() => props.checkStrictly, newVal => {\n      store.value.checkStrictly = newVal;\n    });\n    const filter = value => {\n      if (!props.filterNodeMethod) throw new Error(\"[Tree] filterNodeMethod is required when filter\");\n      store.value.filter(value);\n    };\n    const getNodeKey$1 = node => {\n      return getNodeKey(props.nodeKey, node.data);\n    };\n    const getNodePath = data => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in getNodePath\");\n      const node = store.value.getNode(data);\n      if (!node) return [];\n      const path = [node.data];\n      let parent = node.parent;\n      while (parent && parent !== root.value) {\n        path.push(parent.data);\n        parent = parent.parent;\n      }\n      return path.reverse();\n    };\n    const getCheckedNodes = (leafOnly, includeHalfChecked) => {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked);\n    };\n    const getCheckedKeys = leafOnly => {\n      return store.value.getCheckedKeys(leafOnly);\n    };\n    const getCurrentNode = () => {\n      const currentNode2 = store.value.getCurrentNode();\n      return currentNode2 ? currentNode2.data : null;\n    };\n    const getCurrentKey = () => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in getCurrentKey\");\n      const currentNode2 = getCurrentNode();\n      return currentNode2 ? currentNode2[props.nodeKey] : null;\n    };\n    const setCheckedNodes = (nodes, leafOnly) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCheckedNodes\");\n      store.value.setCheckedNodes(nodes, leafOnly);\n    };\n    const setCheckedKeys = (keys, leafOnly) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCheckedKeys\");\n      store.value.setCheckedKeys(keys, leafOnly);\n    };\n    const setChecked = (data, checked, deep) => {\n      store.value.setChecked(data, checked, deep);\n    };\n    const getHalfCheckedNodes = () => {\n      return store.value.getHalfCheckedNodes();\n    };\n    const getHalfCheckedKeys = () => {\n      return store.value.getHalfCheckedKeys();\n    };\n    const setCurrentNode = (node, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCurrentNode\");\n      handleCurrentChange(store, ctx.emit, () => {\n        broadcastExpanded(node);\n        store.value.setUserCurrentNode(node, shouldAutoExpandParent);\n      });\n    };\n    const setCurrentKey = (key, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCurrentKey\");\n      handleCurrentChange(store, ctx.emit, () => {\n        broadcastExpanded();\n        store.value.setCurrentNodeKey(key, shouldAutoExpandParent);\n      });\n    };\n    const getNode = data => {\n      return store.value.getNode(data);\n    };\n    const remove = data => {\n      store.value.remove(data);\n    };\n    const append = (data, parentNode) => {\n      store.value.append(data, parentNode);\n    };\n    const insertBefore = (data, refNode) => {\n      store.value.insertBefore(data, refNode);\n    };\n    const insertAfter = (data, refNode) => {\n      store.value.insertAfter(data, refNode);\n    };\n    const handleNodeExpand = (nodeData, node, instance) => {\n      broadcastExpanded(node);\n      ctx.emit(\"node-expand\", nodeData, node, instance);\n    };\n    const updateKeyChildren = (key, data) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in updateKeyChild\");\n      store.value.updateChildren(key, data);\n    };\n    provide(\"RootTree\", {\n      ctx,\n      props,\n      store,\n      root,\n      currentNode,\n      instance: getCurrentInstance()\n    });\n    provide(formItemContextKey, void 0);\n    return {\n      ns,\n      store,\n      root,\n      currentNode,\n      dragState,\n      el$,\n      dropIndicator$,\n      isEmpty,\n      filter,\n      getNodeKey: getNodeKey$1,\n      getNodePath,\n      getCheckedNodes,\n      getCheckedKeys,\n      getCurrentNode,\n      getCurrentKey,\n      setCheckedNodes,\n      setCheckedKeys,\n      setChecked,\n      getHalfCheckedNodes,\n      getHalfCheckedKeys,\n      setCurrentNode,\n      setCurrentKey,\n      t,\n      getNode,\n      remove,\n      append,\n      insertBefore,\n      insertAfter,\n      handleNodeExpand,\n      updateKeyChildren\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"el$\",\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.is(\"dragging\", !!_ctx.dragState.draggingNode), _ctx.ns.is(\"drop-not-allow\", !_ctx.dragState.allowDrop), _ctx.ns.is(\"drop-inner\", _ctx.dragState.dropType === \"inner\"), {\n      [_ctx.ns.m(\"highlight-current\")]: _ctx.highlightCurrent\n    }]),\n    role: \"tree\"\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.root.childNodes, child => {\n    return openBlock(), createBlock(_component_el_tree_node, {\n      key: _ctx.getNodeKey(child),\n      node: child,\n      props: _ctx.props,\n      accordion: _ctx.accordion,\n      \"render-after-expand\": _ctx.renderAfterExpand,\n      \"show-checkbox\": _ctx.showCheckbox,\n      \"render-content\": _ctx.renderContent,\n      onNodeExpand: _ctx.handleNodeExpand\n    }, null, 8, [\"node\", \"props\", \"accordion\", \"render-after-expand\", \"show-checkbox\", \"render-content\", \"onNodeExpand\"]);\n  }), 128)), _ctx.isEmpty ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"empty-block\"))\n  }, [renderSlot(_ctx.$slots, \"empty\", {}, () => {\n    var _a;\n    return [createElementVNode(\"span\", {\n      class: normalizeClass(_ctx.ns.e(\"empty-text\"))\n    }, toDisplayString((_a = _ctx.emptyText) != null ? _a : _ctx.t(\"el.tree.emptyText\")), 3)];\n  })], 2)) : createCommentVNode(\"v-if\", true), withDirectives(createElementVNode(\"div\", {\n    ref: \"dropIndicator$\",\n    class: normalizeClass(_ctx.ns.e(\"drop-indicator\"))\n  }, null, 2), [[vShow, _ctx.dragState.showDropIndicator]])], 2);\n}\nvar Tree = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"tree.vue\"]]);\nexport { Tree as default };","map":{"version":3,"names":["_sfc_main","defineComponent","name","components","ElTreeNode","props","data","type","Array","default","emptyText","String","renderAfterExpand","Boolean","nodeKey","checkStrictly","defaultExpandAll","expandOnClickNode","checkOnClickNode","checkDescendants","autoExpandParent","defaultCheckedKeys","defaultExpandedKeys","currentNodeKey","Number","renderContent","Function","showCheckbox","draggable","allowDrag","allowDrop","Object","children","label","disabled","lazy","highlightCurrent","load","filterNodeMethod","accordion","indent","icon","iconPropType","emits","setup","ctx","t","useLocale","ns","useNamespace","selectInfo","inject","selectKey","store","ref","TreeStore","key","value","initialize","root","currentNode","el$","dropIndicator$","broadcastExpanded","useNodeExpandEventBroadcast","dragState","useDragNodeHandler","useKeydown","isEmpty","computed","childNodes","hasFilteredOptions","length","every","visible","watch","newVal","setCurrentNodeKey","setDefaultCheckedKey","setDefaultExpandedKeys","setData","deep","filter","Error","getNodeKey$1","node","getNodeKey","getNodePath","getNode","path","parent","push","reverse","getCheckedNodes","leafOnly","includeHalfChecked","getCheckedKeys","getCurrentNode","currentNode2","getCurrentKey","setCheckedNodes","nodes","setCheckedKeys","keys","setChecked","checked","getHalfCheckedNodes","getHalfCheckedKeys","setCurrentNode","shouldAutoExpandParent","handleCurrentChange","emit","setUserCurrentNode","setCurrentKey","remove","append","parentNode","insertBefore","refNode","insertAfter","handleNodeExpand","nodeData","instance","updateKeyChildren","updateChildren","provide","getCurrentInstance","formItemContextKey","createElementBlock","class","normalizeClass","_ctx","b","is","draggingNode","dropType","m","role","openBlock","Fragment","renderList","child","createBlock","_component_el_tree_node","onNodeExpand","e","renderSlot","$slots","_a","createElementVNode","createCommentVNode","withDirectives"],"sources":["../../../../../../packages/components/tree/src/tree.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"el$\"\n    :class=\"[\n      ns.b(),\n      ns.is('dragging', !!dragState.draggingNode),\n      ns.is('drop-not-allow', !dragState.allowDrop),\n      ns.is('drop-inner', dragState.dropType === 'inner'),\n      { [ns.m('highlight-current')]: highlightCurrent },\n    ]\"\n    role=\"tree\"\n  >\n    <el-tree-node\n      v-for=\"child in root.childNodes\"\n      :key=\"getNodeKey(child)\"\n      :node=\"child\"\n      :props=\"props\"\n      :accordion=\"accordion\"\n      :render-after-expand=\"renderAfterExpand\"\n      :show-checkbox=\"showCheckbox\"\n      :render-content=\"renderContent\"\n      @node-expand=\"handleNodeExpand\"\n    />\n    <div v-if=\"isEmpty\" :class=\"ns.e('empty-block')\">\n      <slot name=\"empty\">\n        <span :class=\"ns.e('empty-text')\">\n          {{ emptyText ?? t('el.tree.emptyText') }}\n        </span>\n      </slot>\n    </div>\n    <div\n      v-show=\"dragState.showDropIndicator\"\n      ref=\"dropIndicator$\"\n      :class=\"ns.e('drop-indicator')\"\n    />\n  </div>\n</template>\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  inject,\n  provide,\n  ref,\n  watch,\n} from 'vue'\nimport { iconPropType } from '@element-plus/utils'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { formItemContextKey } from '@element-plus/components/form'\nimport { selectKey } from '@element-plus/components/select/src/token'\nimport TreeStore from './model/tree-store'\nimport { getNodeKey as getNodeKeyUtil, handleCurrentChange } from './model/util'\nimport ElTreeNode from './tree-node.vue'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { useDragNodeHandler } from './model/useDragNode'\nimport { useKeydown } from './model/useKeydown'\nimport type Node from './model/node'\n\nimport type { ComponentInternalInstance, PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type {\n  TreeComponentProps,\n  TreeData,\n  TreeKey,\n  TreeNodeData,\n} from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTree',\n  components: { ElTreeNode },\n  props: {\n    data: {\n      type: Array,\n      default: () => [],\n    },\n    emptyText: {\n      type: String,\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true,\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true,\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false,\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true,\n    },\n    defaultCheckedKeys: Array as PropType<\n      TreeComponentProps['defaultCheckedKeys']\n    >,\n    defaultExpandedKeys: Array as PropType<\n      TreeComponentProps['defaultExpandedKeys']\n    >,\n    currentNodeKey: [String, Number] as PropType<string | number>,\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n    draggable: {\n      type: Boolean,\n      default: false,\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object as PropType<TreeComponentProps['props']>,\n      default: () => ({\n        children: 'children',\n        label: 'label',\n        disabled: 'disabled',\n      }),\n    },\n    lazy: {\n      type: Boolean,\n      default: false,\n    },\n    highlightCurrent: Boolean,\n    load: Function as PropType<TreeComponentProps['load']>,\n    filterNodeMethod: Function as PropType<\n      TreeComponentProps['filterNodeMethod']\n    >,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18,\n    },\n    icon: {\n      type: iconPropType,\n    },\n  },\n  emits: [\n    'check-change',\n    'current-change',\n    'node-click',\n    'node-contextmenu',\n    'node-collapse',\n    'node-expand',\n    'check',\n    'node-drag-start',\n    'node-drag-end',\n    'node-drop',\n    'node-drag-leave',\n    'node-drag-enter',\n    'node-drag-over',\n  ],\n  setup(props, ctx) {\n    const { t } = useLocale()\n    const ns = useNamespace('tree')\n    const selectInfo = inject(selectKey, null)\n\n    const store = ref<TreeStore>(\n      new TreeStore({\n        key: props.nodeKey,\n        data: props.data,\n        lazy: props.lazy,\n        props: props.props,\n        load: props.load,\n        currentNodeKey: props.currentNodeKey,\n        checkStrictly: props.checkStrictly,\n        checkDescendants: props.checkDescendants,\n        defaultCheckedKeys: props.defaultCheckedKeys,\n        defaultExpandedKeys: props.defaultExpandedKeys,\n        autoExpandParent: props.autoExpandParent,\n        defaultExpandAll: props.defaultExpandAll,\n        filterNodeMethod: props.filterNodeMethod,\n      })\n    )\n\n    store.value.initialize()\n\n    const root = ref<Node>(store.value.root)\n    const currentNode = ref<Node>(null)\n    const el$ = ref<Nullable<HTMLElement>>(null)\n    const dropIndicator$ = ref<Nullable<HTMLElement>>(null)\n\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n\n    const { dragState } = useDragNodeHandler({\n      props,\n      ctx,\n      el$,\n      dropIndicator$,\n      store,\n    })\n\n    useKeydown({ el$ }, store)\n\n    const isEmpty = computed(() => {\n      const { childNodes } = root.value\n      const hasFilteredOptions = selectInfo\n        ? selectInfo.hasFilteredOptions !== 0\n        : false\n      return (\n        (!childNodes ||\n          childNodes.length === 0 ||\n          childNodes.every(({ visible }) => !visible)) &&\n        !hasFilteredOptions\n      )\n    })\n\n    watch(\n      () => props.currentNodeKey,\n      (newVal) => {\n        store.value.setCurrentNodeKey(newVal)\n      }\n    )\n\n    watch(\n      () => props.defaultCheckedKeys,\n      (newVal) => {\n        store.value.setDefaultCheckedKey(newVal)\n      }\n    )\n\n    watch(\n      () => props.defaultExpandedKeys,\n      (newVal) => {\n        store.value.setDefaultExpandedKeys(newVal)\n      }\n    )\n\n    watch(\n      () => props.data,\n      (newVal) => {\n        store.value.setData(newVal)\n      },\n      { deep: true }\n    )\n\n    watch(\n      () => props.checkStrictly,\n      (newVal) => {\n        store.value.checkStrictly = newVal\n      }\n    )\n\n    const filter = (value) => {\n      if (!props.filterNodeMethod)\n        throw new Error('[Tree] filterNodeMethod is required when filter')\n      store.value.filter(value)\n    }\n\n    const getNodeKey = (node: Node) => {\n      return getNodeKeyUtil(props.nodeKey, node.data)\n    }\n\n    const getNodePath = (data: TreeKey | TreeNodeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getNodePath')\n      const node = store.value.getNode(data)\n      if (!node) return []\n      const path = [node.data]\n      let parent = node.parent\n      while (parent && parent !== root.value) {\n        path.push(parent.data)\n        parent = parent.parent\n      }\n      return path.reverse()\n    }\n\n    const getCheckedNodes = (\n      leafOnly?: boolean,\n      includeHalfChecked?: boolean\n    ): TreeNodeData[] => {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked)\n    }\n\n    const getCheckedKeys = (leafOnly?: boolean): TreeKey[] => {\n      return store.value.getCheckedKeys(leafOnly)\n    }\n\n    const getCurrentNode = (): TreeNodeData => {\n      const currentNode = store.value.getCurrentNode()\n      return currentNode ? currentNode.data : null\n    }\n\n    const getCurrentKey = (): any => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getCurrentKey')\n      const currentNode = getCurrentNode()\n      return currentNode ? currentNode[props.nodeKey] : null\n    }\n\n    const setCheckedNodes = (nodes: Node[], leafOnly?: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedNodes')\n      store.value.setCheckedNodes(nodes, leafOnly)\n    }\n\n    const setCheckedKeys = (keys: TreeKey[], leafOnly?: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedKeys')\n      store.value.setCheckedKeys(keys, leafOnly)\n    }\n\n    const setChecked = (\n      data: TreeKey | TreeNodeData,\n      checked: boolean,\n      deep: boolean\n    ) => {\n      store.value.setChecked(data, checked, deep)\n    }\n\n    const getHalfCheckedNodes = (): TreeNodeData[] => {\n      return store.value.getHalfCheckedNodes()\n    }\n\n    const getHalfCheckedKeys = (): TreeKey[] => {\n      return store.value.getHalfCheckedKeys()\n    }\n\n    const setCurrentNode = (node: Node, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentNode')\n\n      handleCurrentChange(store, ctx.emit, () => {\n        broadcastExpanded(node)\n        store.value.setUserCurrentNode(node, shouldAutoExpandParent)\n      })\n    }\n\n    const setCurrentKey = (key?: TreeKey, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentKey')\n\n      handleCurrentChange(store, ctx.emit, () => {\n        broadcastExpanded()\n        store.value.setCurrentNodeKey(key, shouldAutoExpandParent)\n      })\n    }\n\n    const getNode = (data: TreeKey | TreeNodeData): Node => {\n      return store.value.getNode(data)\n    }\n\n    const remove = (data: TreeNodeData | Node) => {\n      store.value.remove(data)\n    }\n\n    const append = (\n      data: TreeNodeData,\n      parentNode: TreeNodeData | TreeKey | Node\n    ) => {\n      store.value.append(data, parentNode)\n    }\n\n    const insertBefore = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData | Node\n    ) => {\n      store.value.insertBefore(data, refNode)\n    }\n\n    const insertAfter = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData | Node\n    ) => {\n      store.value.insertAfter(data, refNode)\n    }\n\n    const handleNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const updateKeyChildren = (key: TreeKey, data: TreeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in updateKeyChild')\n      store.value.updateChildren(key, data)\n    }\n\n    provide('RootTree', {\n      ctx,\n      props,\n      store,\n      root,\n      currentNode,\n      instance: getCurrentInstance(),\n    } as any)\n\n    provide(formItemContextKey, undefined)\n\n    return {\n      ns,\n      // ref\n      store,\n      root,\n      currentNode,\n      dragState,\n      el$,\n      dropIndicator$,\n\n      // computed\n      isEmpty,\n\n      // methods\n      filter,\n      getNodeKey,\n      getNodePath,\n      getCheckedNodes,\n      getCheckedKeys,\n      getCurrentNode,\n      getCurrentKey,\n      setCheckedNodes,\n      setCheckedKeys,\n      setChecked,\n      getHalfCheckedNodes,\n      getHalfCheckedKeys,\n      setCurrentNode,\n      setCurrentKey,\n      t,\n      getNode,\n      remove,\n      append,\n      insertBefore,\n      insertAfter,\n      handleNodeExpand,\n      updateKeyChildren,\n    }\n  },\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}